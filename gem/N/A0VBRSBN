作者: itoc (遨遊在一度空間) 看板: plan
標題: [功能] 並列主題
時間: Sun May 11 14:36:05 2003                          Updated: 2003/05/11

  所謂並列主題就是將文章依標題排序
  按 K 進入並列主題，在裡面可以用 QA|? 來搜尋

: post.c

static int post_head();
+ static int do_thread();

: post.c:post_cb[]

+  'K', do_thread,              /* itoc.030511: 並列主題模式 */

: post.c 最後面加入以下這整段

/*-------------------------------------------------------*/
/* 並列主題                                              */
/*-------------------------------------------------------*/


static int
thread_cmp(a, b)
  HDR *a;
  HDR *b;
{
  int k;
  char *titleA, *titleB;

  titleA = str_ttl(a->title);
  titleB = str_ttl(b->title);

  /* 標題/時間交叉比對 */
  k = strcmp(titleA, titleB);
  return k ? k : (a->chrono - b->chrono);
}


static int
thread_main()
{
  int fd, size, max;
  HDR *thread;
  char folder[64], fpath[64];
  struct stat st1, st2;

  brd_fpath(folder, currboard, fn_dir);

  if (stat(folder, &st1) == -1)
    return -1;

  brd_fpath(fpath, currboard, ".THREAD");

  if (stat(fpath, &st2) != -1)  /* 已有 .THREAD 檔 */
  {
    if (st2.st_mtime >= st1.st_mtime)
    {
      /* 若已有 .THREAD 且是由最新的 .DIR 做出來的，那麼就不重覆產生一個 */
      return st2.st_size / sizeof(HDR);
    }
    unlink(fpath);  /* 砍掉舊的，重新產生 */
  }

  /* 產生 .THREAD 檔 */
  if ((fd = open(folder, O_RDONLY)) >= 0)
  {
    size = st1.st_size;
    thread = (HDR *) malloc(size);
    read(fd, thread, size);
    close(fd);
    max = size / sizeof(HDR);
    if (max > 1)
      qsort(thread, max, sizeof(HDR), thread_cmp);
    rec_add(fpath, thread, size);
    free(thread);
    return max;
  }

  return -1;
}


static KeyFunc thread_cb[] =
{
  XO_INIT, post_init,
  XO_LOAD, post_load,
  XO_HEAD, post_head,
  XO_BODY, post_body,

  'r', post_browse,
  'y', post_reply,
  Ctrl('P'), post_add,
  Ctrl('Q'), xo_uquery,
  Ctrl('O'), xo_usetup,

  'h', post_help
};


static int
do_thread(xo)
  XO *xo;
{
  int max;
  char fpath[64];
  XO *xt;

  outz("★ 系統處理標題中，請稍候 \033[5m...\033[m");
  refresh();

  if ((max = thread_main()) <= 0)
  {
    vmsg("發生不明錯誤，請報告站長");
    return XO_FOOT;
  }

  brd_fpath(fpath, currboard, ".THREAD");
  xz[XZ_POST - XO_ZONE].xo = xt = xo_new(fpath);
  xz[XZ_POST - XO_ZONE].cb = thread_cb;   /* 限制在 thread 裡面可以用的指令 */
  xo->pos = 0;
  xo->key = XZ_POST;
  xover(XZ_POST);
  free(xt);

  xz[XZ_POST - XO_ZONE].cb = post_cb;     /* 恢復原本可以用的指令 */

  return post_load(xo);
}

--
[1;37m□ 本文章由 [33mitoc[37m 從 [32mitoc.Dorm-GD2.NCTU.edu.tw[37m 發表[m
